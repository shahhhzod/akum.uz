# Generated by Django 5.1.1 on 2024-09-10 20:35

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Advantage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='Заголовок')),
                ('subtitle', models.TextField(verbose_name='Подзаголовок')),
                ('icon', models.FileField(upload_to='advantages/icons/', verbose_name='Иконка')),
            ],
            options={
                'verbose_name': 'Преимущество',
                'verbose_name_plural': 'Преимущества',
            },
        ),
        migrations.CreateModel(
            name='Banner',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=200, null=True)),
                ('image', models.ImageField(upload_to='banners/')),
                ('link', models.URLField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'Баннер',
                'verbose_name_plural': 'Баннеры',
            },
        ),
        migrations.CreateModel(
            name='BatteryCard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='Название')),
                ('link', models.URLField(blank=True, null=True, verbose_name='Ссылка')),
                ('image', models.ImageField(upload_to='batteries/', verbose_name='Изображение')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Порядок отображения')),
            ],
            options={
                'verbose_name': 'Карточка аккумулятора',
                'verbose_name_plural': 'Карточки аккумуляторов',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='Brand',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('logo', models.ImageField(blank=True, null=True, upload_to='brands/')),
            ],
        ),
        migrations.CreateModel(
            name='Cart',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_key', models.CharField(max_length=40, unique=True, verbose_name='Ключ сессии')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
            ],
        ),
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contact_type', models.CharField(choices=[('phone', 'Телефон'), ('address', 'Адрес'), ('email', 'Email')], max_length=10, verbose_name='Тип контакта')),
                ('value', models.CharField(max_length=255, verbose_name='Контактные данные')),
                ('icon_class', models.CharField(blank=True, max_length=50, verbose_name='Класс иконки (для Bootstrap Icons)')),
            ],
            options={
                'verbose_name': 'Контакт',
                'verbose_name_plural': 'Контакты',
            },
        ),
        migrations.CreateModel(
            name='ContactTicket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Имя')),
                ('email', models.EmailField(max_length=254, verbose_name='Электронная почта')),
                ('message', models.TextField(verbose_name='Сообщение')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
            ],
            options={
                'verbose_name': 'Тикет',
                'verbose_name_plural': 'Тикеты',
            },
        ),
        migrations.CreateModel(
            name='News',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='Заголовок')),
                ('slug', models.SlugField(unique=True, verbose_name='Slug (часть URL)')),
                ('image', models.ImageField(upload_to='news_images/', verbose_name='Изображение')),
                ('content', models.TextField(verbose_name='Содержание')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
            ],
            options={
                'verbose_name': 'Новость',
                'verbose_name_plural': 'Новости',
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('delivery_method', models.CharField(choices=[('pickup', 'Самовывоз'), ('delivery', 'Доставка')], max_length=50, verbose_name='Способ доставки')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('name', models.CharField(max_length=100, verbose_name='Имя')),
                ('email', models.EmailField(max_length=254, verbose_name='Электронная почта')),
                ('phone', models.CharField(max_length=20, verbose_name='Телефон')),
                ('address', models.CharField(blank=True, max_length=255, null=True, verbose_name='Адрес')),
                ('payment_method', models.CharField(choices=[('cash', 'Наличные курьеру')], default='cash', max_length=50, verbose_name='Способ оплаты')),
            ],
            options={
                'verbose_name': 'Заказ',
                'verbose_name_plural': 'Заказы',
            },
        ),
        migrations.CreateModel(
            name='ProductPage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Название страницы')),
                ('slug', models.SlugField(unique=True, verbose_name='Slug (часть URL)')),
                ('content', models.TextField(blank=True, verbose_name='Содержание страницы')),
            ],
            options={
                'verbose_name': 'Страница продукции',
                'verbose_name_plural': 'Страницы продукции',
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='Название услуги')),
                ('description', models.TextField(verbose_name='Описание услуги')),
                ('icon', models.ImageField(upload_to='services/icons/', verbose_name='Иконка')),
            ],
            options={
                'verbose_name': 'Услуга',
                'verbose_name_plural': 'Услуги',
            },
        ),
        migrations.CreateModel(
            name='SingleBanner',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=255, null=True, verbose_name='Заголовок баннера')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Описание баннера')),
                ('image', models.ImageField(upload_to='banners/single/', verbose_name='Изображение баннера')),
                ('link', models.URLField(blank=True, max_length=255, null=True, verbose_name='Ссылка')),
                ('order', models.PositiveIntegerField(default=0, help_text='Порядок отображения баннеров', verbose_name='Порядок')),
            ],
            options={
                'verbose_name': 'Одиночный баннер',
                'verbose_name_plural': 'Одиночные баннеры',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='SocialLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Название социальной сети')),
                ('url', models.URLField(verbose_name='Ссылка на социальную сеть')),
                ('icon_image', models.ImageField(upload_to='social_icons/', verbose_name='Иконка социальной сети')),
            ],
            options={
                'verbose_name': 'Социальная сеть',
                'verbose_name_plural': 'Социальные сети',
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Название категории')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Описание категорий')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subcategories', to='shop.category', verbose_name='Родительская категория')),
            ],
            options={
                'verbose_name': 'Категория',
                'verbose_name_plural': 'Категории',
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Имя товара')),
                ('description', models.TextField(verbose_name='Описание товара')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Цена товара')),
                ('discount_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Цена скидки товара')),
                ('stock', models.PositiveIntegerField(verbose_name='Количество (шт)')),
                ('available', models.BooleanField(default=True, verbose_name='В наличии')),
                ('shippingCharge', models.IntegerField(blank=True, null=True, verbose_name='Цена доставки')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создано в')),
                ('brand', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='products', to='shop.brand', verbose_name='Бренд товара')),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='products', to='shop.category', verbose_name='Категория товара')),
            ],
            options={
                'verbose_name': 'Товар',
                'verbose_name_plural': 'Товары',
            },
        ),
        migrations.CreateModel(
            name='OrderItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(default=1, verbose_name='Количество')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Цена')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='shop.order', verbose_name='Заказ')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shop.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Детали заказа',
                'verbose_name_plural': 'Детали заказов',
            },
        ),
        migrations.CreateModel(
            name='CartItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Количество')),
                ('cart', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='shop.cart', verbose_name='Корзина')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shop.product', verbose_name='Товар')),
            ],
        ),
        migrations.CreateModel(
            name='ProductImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='product_images/')),
                ('alt_text', models.CharField(blank=True, max_length=255, null=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='shop.product')),
            ],
            options={
                'verbose_name': 'Изображение товар',
                'verbose_name_plural': 'Изображение товаров',
            },
        ),
        migrations.CreateModel(
            name='BatteryInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='Название аккумулятора')),
                ('product_code', models.CharField(blank=True, max_length=50, null=True, verbose_name='Код изделия')),
                ('box_code', models.CharField(blank=True, max_length=50, null=True, verbose_name='Код коробки')),
                ('power', models.CharField(blank=True, max_length=50, null=True, verbose_name='Мощность')),
                ('capacity', models.CharField(blank=True, max_length=50, null=True, verbose_name='Значение A (EN)')),
                ('polarity', models.CharField(blank=True, max_length=50, null=True, verbose_name='Полюсное направление')),
                ('terminal_type', models.CharField(blank=True, max_length=50, null=True, verbose_name='Тип полюса')),
                ('weight', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='Общий вес (кг)')),
                ('width', models.PositiveIntegerField(blank=True, null=True, verbose_name='Ширина (мм)')),
                ('length', models.PositiveIntegerField(blank=True, null=True, verbose_name='Длина (мм)')),
                ('height', models.CharField(blank=True, max_length=50, null=True, verbose_name='Высота с клеммой (мм)')),
                ('image', models.ImageField(blank=True, null=True, upload_to='battery_images/', verbose_name='Изображение аккумулятора')),
                ('nominal_capacity', models.CharField(blank=True, max_length=50, null=True, verbose_name='Номинальная емкость')),
                ('cold_cranking_amperage', models.CharField(blank=True, max_length=50, null=True, verbose_name='Ток холодной прокрутки')),
                ('warranty', models.CharField(blank=True, max_length=50, null=True, verbose_name='Гарантия')),
                ('polarity_type', models.CharField(blank=True, max_length=50, null=True, verbose_name='Полярность')),
                ('product_page', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='batteries', to='shop.productpage', verbose_name='Страница продукта')),
            ],
            options={
                'verbose_name': 'Информация об аккумуляторе',
                'verbose_name_plural': 'Информация об аккумуляторах',
            },
        ),
    ]
